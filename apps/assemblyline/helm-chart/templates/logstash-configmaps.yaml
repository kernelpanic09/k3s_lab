{{ if .Values.useLogstash }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: default-logstash-config
data:
  logstash.yml: |
    monitoring.enabled: false
    http.host: 0.0.0.0
    pipeline.ecs_compatibility: "disabled"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-pipeline
data:
  logstash.conf: |
{{ if .Values.customLogstashPipeline }}
{{ .Values.customLogstashPipeline | indent 4}}
{{ else }}
    input {
      beats {
        port => 5044
      }
    }
    filter {
      mutate {
        add_field => {
          "[@metadata][target_index]" => "%{[@metadata][beat]}-%{[@metadata][version]}"
        }
      }
      if "Starting task" in [message]{
        grok{
          match => [ "message" , "\AStarting task: %{NOTSPACE:submission}%{SPACE}%{NOTSPACE:filetype}"]
        }
      }
      if "will count towards" in [message]{
        grok{
          match => [ "message" , "\A%{NOTSPACE} %{WORD:action} will count towards %{USERNAME:username} quota"]
        }
      }
      if "::" in [message]{
        grok{
          match => [ "message", "\A%{USERNAME:username} %{SYSLOG5424SD:classification} :: %{WORD:action}%{GREEDYDATA:params}"]
        }
      }
      if "IP:" in [message]{
        grok{
          match => [ "message", "\A%{S3_REQUEST_LINE:action} \(U:%{USERNAME:username} - IP:%{IP:user_ip}\)%{GREEDYDATA}"]
        }
        geoip{
          source => "user_ip"
        }
      }
      if "beats_input_codec_plain_applied" in [tags] {
          mutate {
              remove_tag => ["beats_input_codec_plain_applied"]
          }
      }
      mutate { lowercase => ["username"] }
    }
    output {
      elasticsearch {
        hosts => ["${LOGGING_PROTOCOL}://${LOGGING_HOST}"]
        user => "${LOGGING_USERNAME}"
        password => "${LOGGING_PASSWORD}"
        sniffing => false
        index => "%{[@metadata][target_index]}"
        ilm_enabled => true
        ssl_certificate_verification => {{ if eq .Values.loggingTLSVerify "none" }}false{{ else }}true{{ end }}
      }
    }
{{ end }}
{{ end }}

#   processors:
#     - drop_event:
#         when:
#           or:
#             - regexp:
#                 container.labels.io_kubernetes_container_name: "(nginx-ingress-controller)|(tunnel-front)"
#             - equals:
#                 kubernetes.namespace: kube-system

