name: PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: demoapp
  ECR_REGISTRY: 478047323853.dkr.ecr.us-east-1.amazonaws.com
  PR_NUMBER: ${{ github.event.pull_request.number }}
  IMAGE_TAG: pr-${{ github.sha }}
  APP_NAME: demoapp-pr${{ github.event.pull_request.number }}
  PR_DOMAIN: pr${{ github.event.pull_request.number }}.codepretzels.com
  NAMESPACE: demoapp-pr${{ github.event.pull_request.number }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  

jobs:
  preview:
    if: github.event.action != 'closed'
    runs-on: [self-hosted, linux]

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug AWS identity
        run: aws sts get-caller-identity
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}        

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | \
            docker login --username AWS --password-stdin $ECR_REGISTRY
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}

      - name: Build and push Docker image to ECR
        uses: docker/build-push-action@v5
        with:
          context: ./apps/demoapp
          file: ./apps/demoapp/Dockerfile
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          platforms: linux/amd64

      - name: Generate imagePullSecret manifest
        run: bash scripts/gen-image-pull-secret.sh ${NAMESPACE} apps/demoapp/overlays/preview/image-pull-secret.yml

      - name: Replace patch values
        run: |
          sed -i "s|REPLACE_IMAGE_TAG|${IMAGE_TAG}|g" apps/demoapp/overlays/preview/deployment-patch.yml
          sed -i "s|REPLACE_PR_DOMAIN|${PR_DOMAIN}|g" apps/demoapp/overlays/preview/ingress-patch.yml

      - name: Generate namespace manifest dynamically
        run: |
          echo "apiVersion: v1" > apps/demoapp/overlays/preview/namespace.yml
          echo "kind: Namespace" >> apps/demoapp/overlays/preview/namespace.yml
          echo "metadata:" >> apps/demoapp/overlays/preview/namespace.yml
          echo "  name: ${NAMESPACE}" >> apps/demoapp/overlays/preview/namespace.yml

      - name: Debug namespace.yml
        run: cat apps/demoapp/overlays/preview/namespace.yml

      - name: Commit PR-specific patch changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add -f apps/demoapp/overlays/preview/namespace.yml
          git add -f apps/demoapp/overlays/preview/deployment-patch.yml
          git add -f apps/demoapp/overlays/preview/ingress-patch.yml
          git add -f apps/demoapp/overlays/preview/image-pull-secret.yml  # âœ… ADD THIS LINE
          git commit -m "Update PR #${PR_NUMBER} namespace and ArgoCD patches" || echo "No changes"
          git push origin HEAD:${{ github.head_ref }}

      - name: Login to ArgoCD
        run: |
          argocd login argo.codepretzels.com \
            --username admin \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --insecure

      - name: Deploy Preview App with ArgoCD
        run: |
          argocd app create ${APP_NAME} \
            --repo https://github.com/kernelpanic09/k3s_lab.git \
            --path apps/demoapp/overlays/preview \
            --revision ${{ github.head_ref }} \
            --dest-server https://kubernetes.default.svc \
            --dest-namespace ${NAMESPACE} \
            --upsert

          argocd app sync ${APP_NAME}

  cleanup:
    if: github.event.action == 'closed'
    runs-on: [self-hosted, linux]

    steps:
      - name: Delete ArgoCD App and Namespace
        run: |
          argocd app delete demoapp-pr${{ github.event.pull_request.number }} --yes || true
          kubectl delete namespace demoapp-pr${{ github.event.pull_request.number }} || true
